# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ ci-cd-docker ]
    tags:
      - '*'
  pull_request:
    branches: [ ci-cd-docker ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      qbee_upload_folder: test

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Resolve package details
      - name: Resolve package details
        id: resolve-package-details
        run: |

          #PKG_VERSION=$(git log -n 1 --date=format:%Y%m%d --pretty=0.0.0~git%cd.%h)
          PKG_VERSION="0.0.$(date +%s)"
          DEPLOYMENT_GROUP="${{ secrets.QBEE_GROUP_ID_DEV }}"
          if [[ ${{ github.ref_type }} == "tag" ]]; then
            PKG_VERSION=$(git describe --abbrev=0 --tags)
            # Deploy to prod on tag
            DEPLOYMENT_GROUP="${{ secrets.QBEE_GROUP_ID_PROD }}"
          fi

          PKG_NAME=$(basename ${{ github.repository }})
          PKG_ARCH=$(dpkg --print-architecture)

          echo "::set-output name=PKG_VERSION::$PKG_VERSION"
          echo "::set-output name=PKG_NAME::$PKG_NAME"
          echo "::set-output name=PKG_ARCH::$PKG_ARCH"
          echo "::set-output name=PKG_FILENAME::${PKG_NAME}_${PKG_VERSION}_${PKG_ARCH}.deb"
          echo "::set-output name=DEPLOYMENT_GROUP::$DEPLOYMENT_GROUP"

      - name: qbee.io authentication
        id: qbee-auth
        uses: qbee-io/authenticate-action@main
        with:
          login: ${{ secrets.QBEE_USER }}
          password: ${{ secrets.QBEE_PW }}
          api_host: www.app.qbee-dev.qbee.io

      - name: qbee.io file upload deb package
        uses: qbee-io/file-upload-action@main
        with:
          api_host: www.app.qbee-dev.qbee.io
          token: ${{ steps.qbee-auth.outputs.token }}
          filename: 'Dockerfile'
          qbee_directory: '/qbee_usecases/docker_ci_cd'
          local_directory: 'ci-cd/docker'
      - name: qbee.io config upload
        id: qbee-io-config-upload
        run: |
          payload=$(jq -rc --arg node_id "${{ steps.resolve-package-details.outputs.DEPLOYMENT_GROUP }}" --arg formtype "docker_containers" '{"node_id":$node_id,"formtype":$formtype,"config":.}')
          
          curl -X POST -d@ci-cd/docker/qbee-config.json --header "Authorization: Bearer ${{ steps.qbee-auth.outputs.token }}" \
            -H "Content-type: application/json" --url https://www.app.qbee-dev.qbee.io/api/v2/change -d ''$payload'' 

#      - name: qbee.io software management
#        uses: qbee-io/software-management-action@v0.4
#        with:
#         token: ${{ steps.qbee-auth.outputs.token }}
#         config_file: 'qbee/software_management.json'
#         package_name: ${{ steps.resolve-package-details.outputs.PKG_FILENAME }}
#         mode: 'replace'
#         device_or_group_id: ${{ steps.resolve-package-details.outputs.DEPLOYMENT_GROUP }}
#         commit_message: 'uploading content from GitHub'
